<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Inicio</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"
      crossorigin="anonymous"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css"
    />
    <link rel="stylesheet" href="./public/css/dashboardStyles.css" />
    <link rel="stylesheet" href="/static/format.css" />
    <link
      rel="stylesheet"
      href="/static/viewsEmpleado/dashboardEmpleado/dashboardempleado.css"
    />
  </head>

  <body>
    <header class="header">
      <div class="container2 header__container">
        <div class="header__logo">
          <img
            class="header__img"
            src="https://image.ibb.co/kcVou6/path3000.png"
          />
          <h1 class="header__title">
            Banca<span class="header__light"> Facil</span>
          </h1>
        </div>
      </div>
    </header>

    <div class="container">
      <div class="section1">
        <div class="subsec1">
          <div class="item0">
            <i class="img bi bi-person-circle"></i>
            <div class="data-user">
              <p class="name"><%= usuario[0].nombre %></p>
              <p class="tpu">Puesto: <%= usuario[0].puesto %></p>
            </div>
          </div>
          <div class="item1" id="item">
            <i class="active bi bi-house"></i>
            <a href="#" class="active">Inicio</a>
          </div>
          <div class="item1" id="item">
            <i class="inactive bi bi-person-bounding-box"></i>
            <a href="/clientesEnSucursal" class="inactive">Clientes</a>
          </div>
        </div>
        <div class="subsec2">
          <div class="item2">
            <i class="inactive bi bi-box-arrow-left"></i>
            <a href="/logoutEmpleado" class="inactive">Cerrar sesión</a>
          </div>
        </div>
      </div>
      <div class="section__empleado">
        <div class="sucursal">
          <p><strong>Sucursal:</strong></p>
          <p><%= usuario[0].sucursal %></p>
        </div>
        <hr />
        <h3>Empelado</h3>
        <p>
          <strong>Nombre:</strong>
          <%= usuario[0].nombre %>
        </p>
        <p>
          <strong>Apellido:</strong>
          <%= usuario[0].apellido %>
        </p>
        <p>
          <strong>Correo:</strong>
          <%= usuario[0].correo %>
        </p>
        <p>
          <strong>Teléfono:</strong>
          <%= usuario[0].numerodetelefono %>
        </p>
        <hr />
      </div>
      <div class="section_report">
        <h2>Tabla de Datos</h2>

        <h3>transferencias por ESTADO:</h3>
        <table>
          <tr>
            <th>Estado</th>
            <th>Número de Transferencias</th>
            <th>Ranking</th>
          </tr>
          <% for (let i = 0; i < data1.length; i++) { %>
          <tr>
            <td><%= data1[i].estado %></td>
            <td><%= data1[i].numerodetransferencias %></td>
            <td><%= data1[i].ranking %></td>
          </tr>
          <% } %>
        </table>

        <h3>Listado de Sucursales</h3>
        <ul>
          <% datos.forEach(function(sucursal) { %>
          <li>
            <strong>Sucursal:</strong> <%= sucursal.sucursal %><br />
            <strong>Mes:</strong> <%= sucursal.mes || 'N/A' %><br />
            <strong>Número de Transferencias:</strong> <%=
            sucursal.numerodetransferencias %>
          </li>
          <% }); %>
        </ul>

        <h3>Sucursales Ordenadas por Número de Transferencias</h3>
        <table>
          <tr>
            <th>Sucursal</th>
            <th>Número de Transferencias</th>
          </tr>
          <% for (let i = 0; i < datosSucursales.length; i++) { %>
          <tr>
            <td><%= datosSucursales[i].sucursal %></td>
            <td><%= datosSucursales[i].numerodetransferencias %></td>
          </tr>
          <% } %>
        </table>
      </div>
    </div>

    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
      crossorigin="anonymous"
    ></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="./javascript/HomeEmp.js"></script>
    <!-- <script src="./javascript/Grafica.js"></script> -->
    <script>
      // Obtener referencias a elementos HTML
      const inputFecha = document.getElementById("inputFecha");
      const canvas = document.getElementById("grafica");
      const ctx2 = canvas.getContext("2d");

      // Función para cargar el archivo JSON y generar el gráfico
      async function cargarJSON() {
        try {
          // Hacer una solicitud para obtener el contenido del archivo JSON
          const respuesta = await fetch("./resultado.json");

          // Verificar si la solicitud fue exitosa
          if (!respuesta.ok) {
            throw new Error("Error al cargar el archivo JSON");
          }

          // Obtener el objeto JSON desde la respuesta
          const datosJson = await respuesta.json();

          // Función para actualizar la gráfica según la fecha seleccionada
          function actualizarGrafica() {
            const fechaSeleccionada = inputFecha.valueAsDate;
            if (!fechaSeleccionada) return;

            const mesSeleccionado = (fechaSeleccionada.getMonth() + 1)
              .toString()
              .padStart(2, "0");
            const anoSeleccionado = fechaSeleccionada.getFullYear().toString();

            const datosFiltrados = datosJson.filter((dato) => {
              // Filtrar por mes y año
              const fechaDato = dato.mes;
              return (
                fechaDato &&
                fechaDato.startsWith(`${anoSeleccionado}-${mesSeleccionado}`)
              );
            });

            // Lógica para dibujar la gráfica con los datosFiltrados
            dibujarGrafica(datosFiltrados);
          }

          // Escuchar cambios en el input y actualizar la gráfica
          inputFecha.addEventListener("change", actualizarGrafica);

          // Llamar a la función inicialmente para mostrar la gráfica con todos los datos
          actualizarGrafica();
        } catch (error) {
          console.error("Error al cargar el archivo JSON:", error.message);
        }
      }

      // Función para dibujar la gráfica
      function dibujarGrafica(datos) {
        // Obtener etiquetas y datos para el gráfico
        const etiquetas = datos.map((dato) => dato.sucursal);
        const datosTransferencias = datos.map(
          (dato) => +dato.numerodetransferencias
        );

        // Crear el gráfico
        const grafica = new Chart(ctx2, {
          type: "bar",
          data: {
            labels: etiquetas,
            datasets: [
              {
                label: "Número de Transferencias",
                data: datosTransferencias,
                backgroundColor: "rgba(75, 192, 192, 0.2)",
                borderColor: "rgba(75, 192, 192, 1)",
                borderWidth: 1,
              },
            ],
          },
          options: {
            scales: {
              y: {
                beginAtZero: true,
              },
            },
          },
        });
      }

      // Llamar a la función para cargar el archivo JSON
      cargarJSON();
    </script>
  </body>
</html>
